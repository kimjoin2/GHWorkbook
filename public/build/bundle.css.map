{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import { onMount } from 'svelte';\n\n    let qData = [];\n    let hideAns = true;\n    let selectedBookPath = '고대사.tsv';\n    const bookType = [\n        {file:'고대사.tsv', title:'고대사'},\n        {file:'남북국.tsv', title:'남북국'},\n        {file:'구한말.tsv', title:'구한말'},\n        {file:'일제강점기.tsv', title:'일제강점기'},\n        {file:'현대사.tsv', title:'현대사'},\n    ]\n\n    onMount(async () => {\n        init();\n    });\n    function init(){\n        hideAns = true;\n        const bookPath = \"./\";\n        fetch(bookPath + selectedBookPath)\n                .then(res => res.text())\n                .then(qText => {\n                    const qArr = getQ(qText);\n                    qData = setOrder(qArr);\n                });\n    }\n\n    function getQ(text, count = 5){\n        const rows = text.split('\\n');\n        const qs = [];\n        for(let i=0; i<rows.length; i++){\n            const rowArr = rows[i].split('\\t');\n            for(let j=1; j<rowArr.length; j++){\n                const q = {time:rowArr[0], order:'', user_order:'', user_check:false, content:rowArr[j]};\n                qs.push(q);\n            }\n        }\n        const res = [];\n        const indexSet = {};\n        for(let i=0; i<count; i++){\n            const max = qs.length;\n            const index = Math.round(max * Math.random() - 0.5);\n            if(indexSet[index] === undefined){\n                res.push(qs[index]);\n                indexSet[index] = true;\n            } else {\n                i--;\n            }\n        }\n        return res;\n    }\n    function setView(qArray){\n        const container = document.querySelector('.q-container');\n        container.innerHTML = '';\n\n        qArray = setOrder(qArray);\n\n        for(let i=0; i<qArray.length; i++){\n            const el = document.querySelector('.q-template').cloneNode(true);\n            el.classList.remove(\"q-template\");\n            el.querySelector('input[type=checkbox]').classList.remove('hide');\n\n            const data = qArray[i];\n            el.querySelector('.time').innerText = data.time;\n            el.querySelector('.order').innerText = data.order;\n            el.querySelector('.content').innerText = data.content;\n            container.innerHTML = container.innerHTML + el.outerHTML;\n        }\n    }\n    function setOrder(qArray){\n        qArray.sort(function(a, b){return a.time - b.time});\n        for(let i=0; i<qArray.length; i++){\n            qArray[i].order = i+1;\n        }\n        qArray.sort(() => Math.random() - Math.random());\n        return qArray;\n    }\n\n    function check(){\n        const arr = getQRows();\n        let result = true;\n        for(let i=0; i<arr.length; i++){\n            const q = arr[i];\n            if(q.querySelector('.user-order').innerText === \"\"){\n                alert(\"전부 체크 하세요.\");\n                return;\n            }\n        }\n        for(let i=0; i<arr.length; i++){\n            const q = arr[i];\n            if(q.querySelector('.user-order').innerText !== q.querySelector('.order').innerText){\n                result = false;\n                break;\n            }\n        }\n        if(result){\n            alert(\"정답\");\n        } else {\n            alert(\"다음 기회에\");\n        }\n        hideAns = false;\n    }\n    function setUserOrder(){\n        const arr = getQRows();\n        const checkCount = document.querySelectorAll('.q-container > .container .user-order-check:checked').length;\n        let userOrderCount = 0;\n        for(let i=0; i<arr.length; i++){\n            if(arr[i].querySelector('.user-order').innerText !== \"\"){\n                userOrderCount++;\n            }\n        }\n        if(checkCount > userOrderCount){\n            for(let i=0; i<arr.length; i++){\n                const targetArr = arr[i].querySelectorAll('input.user-order-check:checked');\n                if(targetArr.length > 0){\n                    const target = targetArr[0].parentNode.parentNode.parentNode.querySelector('.user-order');\n                    if(target.innerText === \"\"){\n                        target.innerText = checkCount;\n                        break;\n                    }\n                }\n            }\n        } else {\n            let deleted = -1;\n            for(let i=0; i<arr.length; i++){\n                const row = arr[i];\n                if(row.querySelector('.user-order').innerText !== \"\" && row.querySelectorAll('.user-order-check:checked').length === 0){\n                    deleted = parseInt(row.querySelector('.user-order').innerText);\n                }\n            }\n            for(let i=0; i<arr.length; i++){\n                const target = arr[i].querySelector('.user-order');\n                const targetText = target.innerText;\n                if(targetText !== \"\"){\n                    const targetInt = parseInt(targetText);\n                    if(targetInt > deleted){\n                        target.innerText = targetInt-1;\n                    } else if(targetInt === deleted){\n                        target.innerText = \"\";\n                    }\n                }\n            }\n        }\n    }\n    function getQRows(){\n        return document.querySelectorAll('.q-container > .container');\n    }\n</script>\n\n<div>\n    <div>\n        <h2>굿럭</h2>\n        <div>\n            <div>시대 선택</div>\n            <div class=\"container\">\n                {#each bookType as {title, file}, i}\n                    <div class=\"container item\">　　</div>\n                    <div class=\"container item\">\n                        <label for={'book_' + i}>{title}</label>\n                        <input id={'book_' + i} type=\"radio\" name=\"bookType\" value={file} bind:group={selectedBookPath} />\n                    </div>\n                {/each}\n            </div>\n        </div>\n        <div class=\"q-container\">\n            {#each qData as {time, order, user_order, user_check, content}}\n                <div class=\"container\">\n                    <div class=\"item ans time\" class:hide={hideAns}>{time}</div>\n                    <div class=\"item ans order\" class:hide={hideAns}>{order}</div>\n                    <div class=\"item user-order\">{user_order}</div>\n                    <div class=\"item check\">\n                        <label>\n                            <input class=\"user-order-check\" type=\"checkbox\" bind:checked={user_check} on:click={setUserOrder} />\n                        </label>\n                    </div>\n                    <div class=\"item content\">{content}</div>\n                </div>\n            {/each}\n        </div>\n    </div>\n    <div>\n        <button on:click={init}>초기화</button>\n        <button on:click={check}>정답 확인</button>\n    </div>\n</div>\n<style>\n    .q-template {\n        display: none;\n    }\n    .container {\n        display: flex;\n        flex-wrap: wrap;\n    }\n    .item {\n\n    }\n    .ans {\n        font-weight: bold;\n        color: red;\n    }\n    .hide {\n        visibility: hidden;\n    }\n    .time {\n        width: 100px;\n    }\n    .order, .user-order {\n        width: 15px;\n    }\n</style>\n"
  ],
  "names": [],
  "mappings": "AA8LI,UAAU,eAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,AACnB,CAAC,AAID,IAAI,eAAC,CAAC,AACF,WAAW,CAAE,IAAI,CACjB,KAAK,CAAE,GAAG,AACd,CAAC,AACD,KAAK,eAAC,CAAC,AACH,UAAU,CAAE,MAAM,AACtB,CAAC,AACD,KAAK,eAAC,CAAC,AACH,KAAK,CAAE,KAAK,AAChB,CAAC,AACD,qBAAM,CAAE,WAAW,eAAC,CAAC,AACjB,KAAK,CAAE,IAAI,AACf,CAAC"
}